<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;

function science_preprocess(&$variables, $hook)
{
  $variables['base_path'] = base_path();

  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
  $domainName = $_SERVER['HTTP_HOST'];

  $variables['site_url'] = $protocol . $domainName;
}

function science_preprocess_node(&$variables) {
  // Get statistics count for current node.
  $statistics = statistics_get($variables['node']->id());
  //$variables['node_stats'] = \Drupal::translation()->formatPlural($statistics['totalcount'], '1 view', '@count views');
  $variables['node_stats'] = $statistics['totalcount'];
  
  // Load the current user.
  //$userId = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

  $query = \Drupal::database()->select('node_field_data', 'nfd');
  $query->condition('nfd.uid', $variables['node']->getOwnerId());
  $count_posts = $query->countQuery()->execute()->fetchField();
  //return $count_posts;
  
  $variables['author_count_posts'] = \Drupal::translation()->formatPlural($count_posts, '1 post', '@count posts');
}


function science_preprocess_block(&$variables) {
  // Get currently active user and his roles.
  $account = \Drupal::currentUser();
  $user = Drupal\user\Entity\User::load($account->id());
  $aroles = $account->getRoles();

  // List out all roles.
  $roles =  \Drupal\user\Entity\Role::loadMultiple();
  foreach ($roles as $role => $rolesObj) {
    $role_list[$role] = $rolesObj->get('label');
  }
  
  foreach ($aroles as $role) {
    $role_label[] = $role_list[$role];
  }
  $dauthu = array_shift($role_label);
  
  $variables['user_rolex'] = implode(", ", $role_label);
  $variables['author_picture'] = user_view($user, 'compact');
  
}

/**
 * Prepares variables for media templates.
 *
 * Default template: media.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - media: An individual media for display.
 */
function science_preprocess_media(&$variables) {
  /** @var \Drupal\media_entity\MediaInterface $media */
  $media = $variables['elements']['#media'];

  $variables['name'] = $media->label();

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['attributes']['class'][] = 'media';
  $variables['attributes']['class'][] = Html::getClass('media-' . $media->bundle());
  if (!$media->isPublished()) {
    $variables['attributes']['class'][] = 'unpublished';
  }
  if ($variables['elements']['#view_mode']) {
    $variables['attributes']['class'][] = Html::getClass('view-mode-' . $variables['elements']['#view_mode']);
  }

  //$variables['name'] = $media->id();
  $variables['url'] = \Drupal::service('path.alias_manager')->getAliasByPath('/media/'.$media->id());
  
}

function science_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

function science_preprocess_image_formatter(&$variables) {

  $item = $variables['item'];

  if (($entity = $item->entity) && empty($item->uri)) {
    // $variables['image']['#uri'] = $entity->getFileUri();
    // The image.factory service will check if our image is valid.
    $image = \Drupal::service('image.factory')->get($entity->getFileUri());
  }
  else {
    $image = \Drupal::service('image.factory')->get($item->uri);
  }

  // $variables['image']['#uri'] = $entity->getFileUri();
  if ($image->isValid()) {
    $variables['width'] = $image->getWidth();
    $variables['height'] = $image->getHeight();
  }
}

/**
 * Implements hook_preprocess_search_result()
 */
function science_preprocess_search_result(&$variables) {
  $node = $variables['result']['node'];
  if (is_object($node) && $node->nid) { // if the result is a node we can load the teaser
      $variables['teaser'] = node_view($node, 'teaser');
  }
}